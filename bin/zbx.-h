#!/bin/bash
### Usage: $0 FILE
### Accepts a file name and extract documentation from comments.
## Special shell comment strings will be grouped and formatted:
##  "###" Bolded short summary section.
##  "##"  Extended summary.
##  "#-"  Used above case statement cases, to extract flags from next line.
##        See an example:
##        case /dev/null in
##           #- This increases verbose level.
##           -v|--verbose)
##               # code ..
##           ;;
##           #- Force colored output.
##           #- Multiline.
##           -c|--ascii) ;;
##           #- <PARAM> notation in this comment
##           #- will otate when parameter is expected
##           #- It must be the first thing on first line.
##           -f|--file) FILE=$1 ;;
##        esac
## Also, terminal width is taken into acount to do wrapping.
[[ -z $1 ]] && $0 "$0" && exit 9
[[ ! -x $1 ]] && >&2 echo Shouldn\'t \"$1\" be executable? && exit 4

# TODO: if line has 4 leading spaces apply sh highlight ansi
awk -v PROG="$(basename $1)" '

BEGIN {
    "tput sgr 0"   | getline color_seq["reset"]
    "tput setaf 2" | getline color_seq["green"]
    "tput setaf 3" | getline color_seq["gold"]
    "tput bold"    | getline color_seq["bold"]

    "tput cols"    | getline width
}

END {
    for (n in header_lines_2)
        printf(color("%s\n", "bold"), trim(header_lines_2[n]))

    for (n in header_lines)
        printf("%s %s\n", color("~", "bold"), header_lines[n])

    width_opts = 0
    for (n in a_width_opt) width_opts += a_width_opt[n]

    width_arg = 0
    for (n in opt_desc_arg) {
        arg_len = length(opt_desc_arg[n])
        if (width_arg < arg_len) width_arg = arg_len
    }

    opt_desc_pad = align("", width_opts + width_arg + 4)

    for (i = 1; i <= num_opt; i++) {
        opts_line = ""
        for (j = 1; j <= length(a_width_opt); j++) {
            opts_line = opts_line align(opt_col[i,j], a_width_opt[j] + 1)
        }
        printf(" %s %s%s\n",
            color(align(opts_line, width_opts), "green"),
            color(align(opt_desc_arg[i], width_arg), "gold"),
            wrap(opt_desc[i], width - (width_opts + width_arg) - 4, opt_desc_pad))
    }
}

/^\s*###/ {
    num_header_2 ++
    header_lines_2[num_header_2] = wrap(to_header_line($line), width - 1, " ")
}

/^\s*##[^#]/ {
    num_header ++
    header_lines[num_header] = wrap(to_header_line($line), width - 3, "~~ ")
}

/^\s*#-/ {
    num_opt ++

    arg_at = index($line, "<")
    arg_to = index($line, ">")
    if (arg_at != 0 && arg_to != 0) {
        opt_desc_arg[num_opt] = substr($line, arg_at + 1, arg_to - arg_at - 1) " "
        opt_desc[num_opt] = trim(substr(to_opts_desc_line($line), ((arg_to - arg_at) + 2)))
    }
    else {
        opt_desc[num_opt] = to_opts_desc_line($line)
    }

}

function to_opts_desc_line(str) {
    sub("^\\s*#-", "", str)
    str = trim(str)

    getline opts_line

    if (match(opts_line, /^\s*#-/)) {
        return str " " to_opts_desc_line(opts_line)
    }

    to_opts_column(opts_line)

    return str
}

function to_opts_column(str) {
    sub("\\).*$", "", str)
    split(str, a_opts, "|")
    for (n in a_opts) {
        opt = trim(a_opts[n])
        opt_col[num_opt, n] = opt

        opt_len = length(opt)
        if (a_width_opt[n] < opt_len) a_width_opt[n] = opt_len
    }
}

function to_header_line(str) {
    sub("^\\s*#+", "", str)
    gsub("\\$0", PROG, str)
    return str
}

#
# STRING FUNCTIONS
#

# Wraps string into terminal sequences. Rememer to measure string lenth before this.
#
# @param str      String to color.
# @param color_k  Sequence map key: one of "reset", "green", "bold" (can be combined)
#
# @return         terminal color sequence followed by strin, treminated by reset color sequence
#
function color(str, color_k) {
    return sprintf("%s", color_seq[color_k] str color_seq["reset"])
}

# Adds right space padding to string.
#
# @param str   string to pad
# @param num   num of spaces
#
# @return str  Space pre-padded string.
#
function align(str, num) {
    return sprintf("%-" num "s", str)
}

# Trims both sides of string.
#
# @param str   string to trim
#
# @return str  trimmed string
#
function trim(str) {
    sub("^\\s*", "", str)
    sub("\\s*$", "", str)
    return str
}

# String will be broken in words so the produced line would not exceed $wrap_len.
# In case of multiple resulting lines, these lines can be padded by $pad_str.
#
# @param str       string to wrap
# @param wrap_len  max len of line
# @param pad_str   (optional) only wrapped lines to pad by str
#
# @return strw     the multiline
#
function wrap(str, wrap_len, pad_str) {
    strw=""
    cmd=sprintf("echo -n \"%s\" | fold -w %s -s", str, wrap_len)
    first=0
    while (cmd | getline strwl) {
        if (first == 0) {
            strw = strwl
            first=1
        } else {
            strw = strw "\n" pad_str strwl
        }
    }
    close(cmd)

    return strw
}
' "$1"

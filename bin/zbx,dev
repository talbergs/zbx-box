#!/bin/bash
### Usage: $0 <zref?>
## This wraps for git worktree workflow.
## Example:
##         $0
##         # This means I want to jump on review.
##         # All remote is listed to choose for branch.
##         # Chosen branch is added to worktree and upstream is set.
##         # Multiselect is possible (use tab).
## Example:
##         $0 ZBX-123-4.4
##         # This means I want to start work on fresh feature.
##         # First branch name is validated.
##         # Then you choose what branch it is based on.
##         # Then branch is created and pushed.
##         # Chosen branch is added to worktree and upstream is set.
## Optionally worktree path is put into "z" jump-path helper (see .env).
##~
source zbx-script-header

for i in $@;do case $i in
    #- Workspace setup as usual - except new brach will NOT be pushed!
    -N | --no-push) nopush=1 ;;
esac;done

# TODO: it creates based on local ref - might add a switch to choose to fetch more recent base version during "create"
create-feature(){
    cd "$WORKTREE/master"
    git worktree add --no-track -f -b "$1" "$WORKTREE/$1" "$2"
    cd $WORKTREE/$1

    if [ -z $nopush ]; then
        git push origin HEAD
    fi

    return $?
}

pull-feature(){
    if [ ! -d "$WORKTREE/$1" ];then
        cd "$WORKTREE/master"
        git worktree add -f "$WORKTREE/$1" "$1"
        cd $WORKTREE/$1
        git branch --set-upstream-to "origin/$1"
    else
        >&2 echo "Cannot add worktree, $WORKTREE/$1 already exists!"
        return 6
    fi

    return $?
}

update-jumpfile(){
    if [ -z $Z_JUMP_FILE ];then
        return 0
    fi

    if [ -f $Z_JUMP_FILE ];then
        entry="$WORKTREE/$1/frontends/php|1|$(date +%s)"
        echo "$entry" >> $Z_JUMP_FILE
    else
        >&2 echo $Z_JUMP_FILE not found
    fi
}

validate-create(){
    REF=$(zbx-util-validate-zref $1)
    [ -z "$REF" ] && return 2
    [ -z "${REF##release*}" ] && >&2 echo "Not allowed to create $REF" && return 3
    [ -z "${REF##master}" ] && >&2 echo "Not allowed to create $REF" && return 4

    REMOTE_EXISTS=$(ls-remote | ag "^$REF$")
    [ ! -z "$REMOTE_EXISTS" ] && \
        >&2 echo "$REF is already created in remote." \
        && return 5

    echo -n $REF

    return 0
}

set -e
# pull-feature
if [ -z "$1" ];then
    for REF in $(ls-remote | fzf \
        --header "git ls-remote '$GITREMOTE'" \
        --prompt "Choose branches to be added to your worktree > " \
        --query "feature/" \
        --multi)
    do
        pull-feature $REF | zbx-util-color -H "Pulling '$REF'"
        update-jumpfile $REF
    done
# create-feature
else
    REF=$(validate-create $1)

    BASEREF="origin/$(ls-remote | fzf \
        --header "About to create '$REF'!" \
        --prompt "Choose which REF will '$REF' be based on: > " \
        --query "release")"

    create-feature $REF $BASEREF \
        | zbx-util-color -H "Creating new '$REF' based on '$BASEREF' in '$GITREMOTE'"
    update-jumpfile $REF
fi

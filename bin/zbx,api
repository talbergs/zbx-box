#!/bin/bash
### Wrapped curl, entr and jq to run API calls on current workspace.
### Automatically authorizes and logout.
## Usage: $0 [method] [?username] [?password]
## Usage: $0 -- [url] [method] [params|params_file] [token]
## Example:
##         $0 host.get
##         # Default authorization: Admin zabbix
## Example:
##         $0 host.get test-user
##         # Authorization: test-user zabbix
## Example:
##         $0 host.get
##         $0 host.get test-user
##         # Keep paralell sessions, the same parameters file.
##         # Useful to run the same API request on different users.
##~

# URL=$1
# METHOD=$2
# PARAMS=$3 | or file
# TOKEN=$4 (optional)
# @stdout response-json
# @stderr request-params and markers
curl_jq() {
	local URL=$1
	local METHOD=$2
	local PARAMS=$3
	local TOKEN=$4

	if [ -e "${PARAMS}" ];then
		PARAMS="$(cat $PARAMS | tr -d '\n')"
	fi

	if [ -z $TOKEN ];then
		FORMAT='{"params":%s,"jsonrpc":"2.0","method":"%s","id":0}'
		req=`printf "${FORMAT}" "${PARAMS}" "${METHOD}"`
	else
		FORMAT='{"params":%s,"jsonrpc":"2.0","method":"%s","id":0,"auth":"%s"}'
		req=`printf "${FORMAT}" "${PARAMS}" "${METHOD}" "${TOKEN}"`
	fi

	>&2 echo === REQUEST[$METHOD] ===
	>&2 echo $req | jq --raw-output
	>&2 echo === RESPONSE[$METHOD] ===
	echo "$req" | curl \
		--insecure \
		--silent \
		-X POST \
		-H 'Content-Type: application/json-rpc' \
		-d @- $URL \
    | jq --raw-output
}

# URL=$1
# USERNAME=$2
# PASSWORD=$3
# @stdout token string
get_token() {
	local URL=$1
	local USERNAME=$2
	local PASSWORD=$3
	local PARAMS=`printf '{"user":"%s","password":"%s"}' "${USERNAME}" "${PASSWORD}"`

	curl_jq "${URL}" user.login "${PARAMS}" \
		| jq --raw-output '.result'
}

if [ "$1" == -- ];then
	shift;URL=$1
	shift;METHOD=$1
	shift;PARAMS=$1
	shift;TOKEN=$1
	curl_jq "${URL}" "${METHOD}" "${PARAMS}" "${TOKEN}"
else
source zbx-script-header
	URL=$(zbx,web -n)
	[ -z $URL ] && exit 4
	URL="${URL}api_jsonrpc.php"

	METHOD=${1:-host.get}
	USERNAME=${2:-Admin}
	PASSWORD=${3:-zabbix}

	TOKEN=$(get_token "${URL}" "${USERNAME}" "${PASSWORD}")

	PARAMS_FILE=/tmp/${METHOD}.json
	if [ ! -e "${PARAMS_FILE}" ];then
		echo -e '{\n  "output":[]\n}' > $PARAMS_FILE
	fi

	remove_token() {
		curl_jq "${URL}" "user.logout" "{}" "${TOKEN}"
	}

	trap remove_token INT
	>&2 echo EDIT $PARAMS_FILE .. watching it.. Ctrl+c to exit
	echo "${PARAMS_FILE}" | entr -p -c $0 -- "${URL}" "${METHOD}" "${PARAMS_FILE}" "${TOKEN}"
fi
